Problem 2 (Runtime Analysis).
	a) In this example, the overall runtime will be 0(n^2). For the first
	 for loop containing the two for loops, each inner for loop runs in 
	 0(n). Each of these loops goes throuhg the entire stack pushing and 
	 popping the values until reaching n, meaning that each loop runs in 
	 the sum of 0(1) from i=0 to n-1 and i=0 to n (which doesnt make a 
	 difference here). Therefore, each inner loop had 0(n) runtime, and the 
	 outer for loop's runtime is the sum of 0(n) + 0(n) (the runtime of 
	 both inner loops added together) from i=0 to n-1. Therefore, the outer 
	 for loop has a runtime of 0(n^2). The while loop after the for loop 
	 would run in 0(n) time because it is the sum of 0(1) for the whole 
	 stack, but in this case the while loop will not even run because all 
	 values will have been previously popped, but either way the while loop 
	 would not affect the overall runtime. 

	b) The overall runtime of this recursive function will be 0(n^2). The 
	function will continue to run recursively until n = 0, and n only 
	decreases when curr <= 0. The function continues to be called 
	recurisvely in such a way that the recursive runtime of the function 
	T(n) = (n-1)T(n-1) + C, and therefore the runtime is (n-1)^2, which 
	simplifies to 0(n^2).

	c) The overall runtime of this function is 0(n). The first for loop 
	will run in 0(n), because it is the sum of 0(1) from i = 1 to n. The 
	while loop will also run in 0(n) time, because enqueue is adding to the 
	back and dequque is taking from the front, and the front will 
	continuously be removed in every iteration of the while loop, and the 
	inner for loop will only run once. Therefore, the overall runtime is 
	0(n)+ 0(n), and is then 0(n).

	d) The first for loop will have a run time of 0(n). For the second for 
	loop, assuming that arr is completely full of 0's (assuming the worst 
	case senario), the inner for loop will run logn times, and the while 
	loop will run n times, while the outer for loop will run n times. This 
	means that the while loop runs in 0(nlogn), and the outer for loop runs 
	in the sum of 0(nlogn) from i = 1 to n-1. Therefore the second for loop 
	runs in 0(n^2logn) , and this is the runtime for the overall function 
	because it is the dominant runtime over 0(n). 

Problem 3 (Amortized Analysis)
	a) The worst-case runtime for somefunc in this case is 0(n^2), because 
	the worst case of this function will be whenever the function bar is 
	called, when the parameters of the first if statemnt are met. Since bar 
	has a worse runtime than foo and everythign else in the function runs 
	in constant time, whenever bar is called will be when the function has 
	the slowest runtime. 

	b) The amortized runtme for somefunc in this situation will be 
	0(n). Bar will run once for every n-1 times and foo will run every 
	other time (n times), and therefore the runtime for the overall 
	function is 0(n(logn)) + 0(n^2). So the amortized runtime will be this 
	divided by n, because the function runs n times. Therefore, the overall 
	amortized runtime will be 0(n), because this is dominant over 0(logn).

	c) In this case, the amortized runtime is 0(nlogn), because now the 
	overall runtime of the function is 0(n^2(logn)) + 0(n^2). After 
	dividing by n for the amortized runtime, the dominant function is 
	0(nlogn).

	d) This new function is essentially doing the same thing as somefunc, 
	expect in the opposite way because max and n are decreasing. The worst 
	case sequence of calls to somefunc and another func would be if n and 
	max were initially equal, because going into somefunc they would then 
	have the worst case runtime of 0(n^2) because bar would run, and if 
	anotherfunc was then run right after, n would be decreased by one, and 
	therefore less than max/2, even though max was multiplied by two 
	because of the initialdecrease of n in anotherfunc. Therefore, in this 
	situation, bar would be run in both functions, using the worst case 
	runtime 0(n^2) for both function, and overall the worst case runtime 
	for the functions called in sequence. 
	The amortized runtime per function call would be the same as above, 
	0(n), because this function has the same overall amortized runtime as 
	the previous one, and therefore the amortized runtime per function call 
	will be the same. 